@page "/books/"

@inject IBookService _bookService
@inject IJSRuntime js

<h3>Books</h3>

@if (!response.Success)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}
else
{

    @if (Books == null)
    {
        <div class="alert alert-info">
            <h4>Loading...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles=@Roles.Administrator>
            <a class="btn btn-primary" href="/books/create"><i class="bi bi-plus"></i>Add</a>
        </AuthorizeView>
        <br />

        <table class="table table-responsive">
            <thead>
                <tr>
                    <th></th>
                    <th>Title</th>
                    <th>Author name</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in Books)
                {
                    <tr>
                        <td>
                            <img src="@book.Image" width="50" height="80" alt="@book.Title"/>
                        </td>
                        <td>@book.Title</td>
                        <td><a class="btn btn-link" href="/authors/details/@book.AuthorId">@book.AuthorName</a></td>
                        <td>@book.Price.ToString("C")</td>
                        <td>
                            <a class="btn btn-secondary" href="/books/details/@book.Id"><i class="bi bi-journal-text"></i> Details</a>
                            <AuthorizeView Roles=@Roles.Administrator>
                                <Authorized>
                                    <a class="btn btn-warning" href="/books/update/@book.Id"><i class="bi bi-pencil"></i>Edit</a>
                                    <button @onclick=@(() => Delete(book.Id)) class="btn btn-danger"><i class="bi bi-trash"></i>Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private List<BookReadOnlyDto> Books;
    private Response<List<BookReadOnlyDto>> response = new Response<List<BookReadOnlyDto>>() { Success = true };

    // protected override async Task OnInitializedAsync()
    // {

    // }

    private async Task Delete(int bookId)
    {
        var book = Books.FirstOrDefault(q => q.Id == bookId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {book.Title} by {book.AuthorName}?");
        if (confirm)
        {
            var responseDelete = await _bookService.DeleteAsync(bookId);
            if (responseDelete.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

    // Make sure that JS calls are done only after the first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            response = await _bookService.GetAllAsync();
            if (response.Success)
            {
                Books = response.Data;
            }
            StateHasChanged();
        }
    }
}

@page "/authors/"

@inject IAuthorService _authorService
@inject IJSRuntime js

<h3>Authors</h3>

@if (!_response.Success)
{
    <div class="alert alert-info">
        <h4>@_response.Message</h4>
    </div>
}
else
{

    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading...</h4>
        </div>
    }
    else
    {
        <AuthorizeView Roles=@Roles.Administrator>
            <a class="btn btn-primary" href="/authors/create"><i class="bi bi-plus"></i>Add</a>
        </AuthorizeView>
        <br />

        <AuthorTable AuthorsParam="Authors" TotalSizeParam="TotalSize" OnScrollCustomEvent="LoadAuthors"/>

        @* <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-secondary" href="/authors/details/@author.Id"><i class="bi bi-journal-text"></i> Details</a>
                            <AuthorizeView Roles=@Roles.Administrator>
                                <Authorized>
                                    <a class="btn btn-warning" href="/authors/update/@author.Id"><i class="bi bi-pencil"></i>Edit</a>
                                    <button @onclick=@(() => Delete(author.Id)) class="btn btn-danger"><i class="bi bi-trash"></i>Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@
    }
}

@code {
    public List<AuthorReadOnlyDto> Authors;
    public int TotalSize { get; set; }
    private Response<AuthorReadOnlyDtoVirtualizeResponse> _response = new Response<AuthorReadOnlyDtoVirtualizeResponse>() { Success = true };

    // protected override async Task OnInitializedAsync()
    // {

    // }

    // private async Task Delete(int authorId)
    // {
    //     var author = Authors.FirstOrDefault(q => q.Id == authorId);
    //     var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {author.FirstName} {author.LastName}?");
    //     if (confirm)
    //     {
    //         var responseDelete = await _authorService.DeleteAsync(authorId);
    //         if (responseDelete.Success)
    //         {
    //             await OnInitializedAsync();
    //         }
    //     }
    // }

    // Make sure that JS calls are done only after the first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _response = await _authorService.GetAllAsync(new QueryParameters { StartIndex = 0});
            if (_response.Success)
            {
                Authors = _response.Data.Items.ToList();
            }
            StateHasChanged();
        }
    }

    private async Task LoadAuthors(QueryParameters queryParameters)
    {
        var virtualizeResult = await _authorService.GetAllAsync(queryParameters);
        Authors = virtualizeResult.Data.Items.ToList();
        TotalSize = virtualizeResult.Data.TotalSize;
    }
}

@page "/authors/create/"

@inject IAuthorService _authorService
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create New Author</h3>

<EditForm Model="AuthorModel" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText class="form-control" @bind-Value="AuthorModel.FirstName" id="firstname" />
        <ValidationMessage For="@(() => AuthorModel.FirstName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText class="form-control" @bind-Value="AuthorModel.LastName" id="lastname" />
        <ValidationMessage For="@(() => AuthorModel.LastName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea class="form-control" @bind-Value="AuthorModel.Bio" id="bio" />
        <ValidationMessage For="@(() => AuthorModel.Bio)" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">
        <i class="bi bi-plus"></i>
        Add
    </button>
    <button type="button" @onclick="BackToList" class="btn btn-dark">
        <i class="bi bi-chevron-double-left"></i>
        Back to list
    </button>
</EditForm>

@code {
    //[SupplyParameterFromForm]
    //public AuthorCreateDto AuthorModel { get; set; }
    private AuthorCreateDto AuthorModel = new AuthorCreateDto();

    // protected override Task OnInitializedAsync()
    // {
    //     AuthorModel = new AuthorCreateDto();
    // }

    private async Task HandleCreateAuthor()
    {
        var response = await _authorService.CreateAsync(AuthorModel);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/authors/");
    }
}

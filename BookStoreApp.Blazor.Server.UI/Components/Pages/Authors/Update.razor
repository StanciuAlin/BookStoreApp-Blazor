@page "/authors/update/{id:int}"
@* By default, the type is string and we add int explicitly *@

@inject IAuthorService _authorService
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Edit @AuthorModel.FirstName @AuthorModel.LastName author</h3>

<EditForm Model="AuthorModel" OnValidSubmit="HandleUpdateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstName">First Name</label>
        <InputText class="form-control" @bind-Value="AuthorModel.FirstName" id="firstname" />
        <ValidationMessage For="@(() => AuthorModel.FirstName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <InputText class="form-control" @bind-Value="AuthorModel.LastName" id="lastname" />
        <ValidationMessage For="@(() => AuthorModel.LastName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea class="form-control" @bind-Value="AuthorModel.Bio" id="bio" />
        <ValidationMessage For="@(() => AuthorModel.Bio)" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">
        <i class="bi bi-pencil"></i>
        Edit
    </button>
    <button @onclick="BackToList" class="btn btn-dark">
        <i class="bi bi-chevron-double-left"></i>
        Back to list
    </button>
</EditForm>

@code {
    // Matching with Id parameter from the @page
    [Parameter]
    public int Id { get; set; }

    private AuthorUpdateDto AuthorModel = new AuthorUpdateDto();

    protected override async Task OnInitializedAsync()
    {
        var response = await _authorService.GetByIdForUpdateAsync(Id);
        if (response.Success)
        {
            AuthorModel = response.Data;
        }
    }

    private async Task HandleUpdateAuthor()
    {
        var response = await _authorService.UpdateAsync(Id, AuthorModel);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        _navigationManager.NavigateTo("/authors/");
    }
}
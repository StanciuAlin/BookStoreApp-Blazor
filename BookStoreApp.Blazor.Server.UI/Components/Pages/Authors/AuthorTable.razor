@inject IAuthorService _authorService
@inject IJSRuntime js

<h3>Authors</h3>

<table class="table table-responsive">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-secondary" href="/authors/details/@author.Id"><i class="bi bi-journal-text"></i> Details</a>
                    <AuthorizeView Roles=@Roles.Administrator>
                        <Authorized>
                            <a class="btn btn-warning" href="/authors/update/@author.Id"><i class="bi bi-pencil"></i>Edit</a>
                            <button @onclick=@(() => Delete(author.Id)) class="btn btn-danger"><i class="bi bi-trash"></i>Delete</button>
                        </Authorized>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
        @* @foreach (var author in Authors)
        {
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-secondary" href="/authors/details/@author.Id"><i class="bi bi-journal-text"></i> Details</a>
                    <AuthorizeView Roles=@Roles.Administrator>
                        <Authorized>
                            <a class="btn btn-warning" href="/authors/update/@author.Id"><i class="bi bi-pencil"></i>Edit</a>
                            <button @onclick=@(() => Delete(author.Id)) class="btn btn-danger"><i class="bi bi-trash"></i>Delete</button>
                        </Authorized>
                    </AuthorizeView>
                </td>
            </tr>
        } *@
    </tbody>
</table>

@code {
    [Parameter]
    public List<AuthorReadOnlyDto> AuthorsParam { get; set; }

    [Parameter]
    public int TotalSizeParam { get; set; }

    [Parameter]
    public EventCallback<QueryParameters> OnScrollCustomEvent { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorReadOnlyDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var productNum = Math.Min(request.Count, TotalSizeParam - request.StartIndex);
        await OnScrollCustomEvent.InvokeAsync(new QueryParameters
            {
                StartIndex = request.StartIndex,
                PageSize = productNum == 0 ? request.Count : productNum
            });
            return new ItemsProviderResult<AuthorReadOnlyDto>(AuthorsParam, TotalSizeParam);
    }

    private async Task Delete(int authorId)
    {
        var author = AuthorsParam.FirstOrDefault(q => q.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {author.FirstName} {author.LastName}?");
        if (confirm)
        {
            var responseDelete = await _authorService.DeleteAsync(authorId);
            if (responseDelete.Success)
            {
                await OnInitializedAsync();
            }
        }
    }

}
